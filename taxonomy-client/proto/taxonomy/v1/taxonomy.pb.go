// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: proto/taxonomy/v1/taxonomy.proto

package taxonomypb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NodeType int32

const (
	NodeType_NODETYPE_UNDEFINED NodeType = 0
	NodeType_CLASS              NodeType = 1
	NodeType_SUBJECT            NodeType = 2
	NodeType_SUPER_TOPIC        NodeType = 3
	NodeType_TOPIC              NodeType = 4
	NodeType_SUBTOPIC           NodeType = 5
	NodeType_CONCEPT            NodeType = 6
)

// Enum value maps for NodeType.
var (
	NodeType_name = map[int32]string{
		0: "NODETYPE_UNDEFINED",
		1: "CLASS",
		2: "SUBJECT",
		3: "SUPER_TOPIC",
		4: "TOPIC",
		5: "SUBTOPIC",
		6: "CONCEPT",
	}
	NodeType_value = map[string]int32{
		"NODETYPE_UNDEFINED": 0,
		"CLASS":              1,
		"SUBJECT":            2,
		"SUPER_TOPIC":        3,
		"TOPIC":              4,
		"SUBTOPIC":           5,
		"CONCEPT":            6,
	}
)

func (x NodeType) Enum() *NodeType {
	p := new(NodeType)
	*p = x
	return p
}

func (x NodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_taxonomy_v1_taxonomy_proto_enumTypes[0].Descriptor()
}

func (NodeType) Type() protoreflect.EnumType {
	return &file_proto_taxonomy_v1_taxonomy_proto_enumTypes[0]
}

func (x NodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeType.Descriptor instead.
func (NodeType) EnumDescriptor() ([]byte, []int) {
	return file_proto_taxonomy_v1_taxonomy_proto_rawDescGZIP(), []int{0}
}

// Request definitions
type GetTaxonomyByIdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaxonomyId    string                 `protobuf:"bytes,1,opt,name=taxonomy_id,json=taxonomyId,proto3" json:"taxonomy_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTaxonomyByIdRequest) Reset() {
	*x = GetTaxonomyByIdRequest{}
	mi := &file_proto_taxonomy_v1_taxonomy_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaxonomyByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaxonomyByIdRequest) ProtoMessage() {}

func (x *GetTaxonomyByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_taxonomy_v1_taxonomy_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaxonomyByIdRequest.ProtoReflect.Descriptor instead.
func (*GetTaxonomyByIdRequest) Descriptor() ([]byte, []int) {
	return file_proto_taxonomy_v1_taxonomy_proto_rawDescGZIP(), []int{0}
}

func (x *GetTaxonomyByIdRequest) GetTaxonomyId() string {
	if x != nil {
		return x.TaxonomyId
	}
	return ""
}

// Response definitions
type GetTaxonomyByIdResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaxonomyInfo  *TaxonomyInfo          `protobuf:"bytes,1,opt,name=taxonomy_info,json=taxonomyInfo,proto3" json:"taxonomy_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTaxonomyByIdResponse) Reset() {
	*x = GetTaxonomyByIdResponse{}
	mi := &file_proto_taxonomy_v1_taxonomy_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaxonomyByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaxonomyByIdResponse) ProtoMessage() {}

func (x *GetTaxonomyByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_taxonomy_v1_taxonomy_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaxonomyByIdResponse.ProtoReflect.Descriptor instead.
func (*GetTaxonomyByIdResponse) Descriptor() ([]byte, []int) {
	return file_proto_taxonomy_v1_taxonomy_proto_rawDescGZIP(), []int{1}
}

func (x *GetTaxonomyByIdResponse) GetTaxonomyInfo() *TaxonomyInfo {
	if x != nil {
		return x.TaxonomyInfo
	}
	return nil
}

type RelatedNode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaxonomyId    string                 `protobuf:"bytes,1,opt,name=taxonomy_id,json=taxonomyId,proto3" json:"taxonomy_id,omitempty"`
	NodeId        string                 `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelatedNode) Reset() {
	*x = RelatedNode{}
	mi := &file_proto_taxonomy_v1_taxonomy_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelatedNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedNode) ProtoMessage() {}

func (x *RelatedNode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_taxonomy_v1_taxonomy_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedNode.ProtoReflect.Descriptor instead.
func (*RelatedNode) Descriptor() ([]byte, []int) {
	return file_proto_taxonomy_v1_taxonomy_proto_rawDescGZIP(), []int{2}
}

func (x *RelatedNode) GetTaxonomyId() string {
	if x != nil {
		return x.TaxonomyId
	}
	return ""
}

func (x *RelatedNode) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type Node struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ShortCode     string                 `protobuf:"bytes,4,opt,name=short_code,json=shortCode,proto3" json:"short_code,omitempty"`
	ParentNode    string                 `protobuf:"bytes,5,opt,name=parent_node,json=parentNode,proto3" json:"parent_node,omitempty"`
	NodeType      NodeType               `protobuf:"varint,6,opt,name=node_type,json=nodeType,proto3,enum=taxonomy.v1.NodeType" json:"node_type,omitempty"`
	RelatedNodes  []*RelatedNode         `protobuf:"bytes,7,rep,name=related_nodes,json=relatedNodes,proto3" json:"related_nodes,omitempty"`
	Children      []string               `protobuf:"bytes,8,rep,name=children,proto3" json:"children,omitempty"`
	Ancestors     []string               `protobuf:"bytes,9,rep,name=ancestors,proto3" json:"ancestors,omitempty"`
	Inactive      bool                   `protobuf:"varint,10,opt,name=inactive,proto3" json:"inactive,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Node) Reset() {
	*x = Node{}
	mi := &file_proto_taxonomy_v1_taxonomy_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_proto_taxonomy_v1_taxonomy_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_proto_taxonomy_v1_taxonomy_proto_rawDescGZIP(), []int{3}
}

func (x *Node) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Node) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Node) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Node) GetShortCode() string {
	if x != nil {
		return x.ShortCode
	}
	return ""
}

func (x *Node) GetParentNode() string {
	if x != nil {
		return x.ParentNode
	}
	return ""
}

func (x *Node) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NODETYPE_UNDEFINED
}

func (x *Node) GetRelatedNodes() []*RelatedNode {
	if x != nil {
		return x.RelatedNodes
	}
	return nil
}

func (x *Node) GetChildren() []string {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *Node) GetAncestors() []string {
	if x != nil {
		return x.Ancestors
	}
	return nil
}

func (x *Node) GetInactive() bool {
	if x != nil {
		return x.Inactive
	}
	return false
}

type TaxonomyInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaxonomyId    string                 `protobuf:"bytes,1,opt,name=taxonomy_id,json=taxonomyId,proto3" json:"taxonomy_id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Version       string                 `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	TenantId      string                 `protobuf:"bytes,5,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	CreatedAt     int64                  `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     int64                  `protobuf:"varint,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Nodes         map[string]*Node       `protobuf:"bytes,8,rep,name=nodes,proto3" json:"nodes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	RootNodes     []string               `protobuf:"bytes,9,rep,name=root_nodes,json=rootNodes,proto3" json:"root_nodes,omitempty"`
	Levels        []string               `protobuf:"bytes,10,rep,name=levels,proto3" json:"levels,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaxonomyInfo) Reset() {
	*x = TaxonomyInfo{}
	mi := &file_proto_taxonomy_v1_taxonomy_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaxonomyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxonomyInfo) ProtoMessage() {}

func (x *TaxonomyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_taxonomy_v1_taxonomy_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxonomyInfo.ProtoReflect.Descriptor instead.
func (*TaxonomyInfo) Descriptor() ([]byte, []int) {
	return file_proto_taxonomy_v1_taxonomy_proto_rawDescGZIP(), []int{4}
}

func (x *TaxonomyInfo) GetTaxonomyId() string {
	if x != nil {
		return x.TaxonomyId
	}
	return ""
}

func (x *TaxonomyInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaxonomyInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TaxonomyInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *TaxonomyInfo) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *TaxonomyInfo) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *TaxonomyInfo) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *TaxonomyInfo) GetNodes() map[string]*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *TaxonomyInfo) GetRootNodes() []string {
	if x != nil {
		return x.RootNodes
	}
	return nil
}

func (x *TaxonomyInfo) GetLevels() []string {
	if x != nil {
		return x.Levels
	}
	return nil
}

var File_proto_taxonomy_v1_taxonomy_proto protoreflect.FileDescriptor

const file_proto_taxonomy_v1_taxonomy_proto_rawDesc = "" +
	"\n" +
	" proto/taxonomy/v1/taxonomy.proto\x12\vtaxonomy.v1\"9\n" +
	"\x16GetTaxonomyByIdRequest\x12\x1f\n" +
	"\vtaxonomy_id\x18\x01 \x01(\tR\n" +
	"taxonomyId\"Y\n" +
	"\x17GetTaxonomyByIdResponse\x12>\n" +
	"\rtaxonomy_info\x18\x01 \x01(\v2\x19.taxonomy.v1.TaxonomyInfoR\ftaxonomyInfo\"G\n" +
	"\vRelatedNode\x12\x1f\n" +
	"\vtaxonomy_id\x18\x01 \x01(\tR\n" +
	"taxonomyId\x12\x17\n" +
	"\anode_id\x18\x02 \x01(\tR\x06nodeId\"\xd5\x02\n" +
	"\x04Node\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x1d\n" +
	"\n" +
	"short_code\x18\x04 \x01(\tR\tshortCode\x12\x1f\n" +
	"\vparent_node\x18\x05 \x01(\tR\n" +
	"parentNode\x122\n" +
	"\tnode_type\x18\x06 \x01(\x0e2\x15.taxonomy.v1.NodeTypeR\bnodeType\x12=\n" +
	"\rrelated_nodes\x18\a \x03(\v2\x18.taxonomy.v1.RelatedNodeR\frelatedNodes\x12\x1a\n" +
	"\bchildren\x18\b \x03(\tR\bchildren\x12\x1c\n" +
	"\tancestors\x18\t \x03(\tR\tancestors\x12\x1a\n" +
	"\binactive\x18\n" +
	" \x01(\bR\binactive\"\x9a\x03\n" +
	"\fTaxonomyInfo\x12\x1f\n" +
	"\vtaxonomy_id\x18\x01 \x01(\tR\n" +
	"taxonomyId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x18\n" +
	"\aversion\x18\x04 \x01(\tR\aversion\x12\x1b\n" +
	"\ttenant_id\x18\x05 \x01(\tR\btenantId\x12\x1d\n" +
	"\n" +
	"created_at\x18\x06 \x01(\x03R\tcreatedAt\x12\x1d\n" +
	"\n" +
	"updated_at\x18\a \x01(\x03R\tupdatedAt\x12:\n" +
	"\x05nodes\x18\b \x03(\v2$.taxonomy.v1.TaxonomyInfo.NodesEntryR\x05nodes\x12\x1d\n" +
	"\n" +
	"root_nodes\x18\t \x03(\tR\trootNodes\x12\x16\n" +
	"\x06levels\x18\n" +
	" \x03(\tR\x06levels\x1aK\n" +
	"\n" +
	"NodesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12'\n" +
	"\x05value\x18\x02 \x01(\v2\x11.taxonomy.v1.NodeR\x05value:\x028\x01*q\n" +
	"\bNodeType\x12\x16\n" +
	"\x12NODETYPE_UNDEFINED\x10\x00\x12\t\n" +
	"\x05CLASS\x10\x01\x12\v\n" +
	"\aSUBJECT\x10\x02\x12\x0f\n" +
	"\vSUPER_TOPIC\x10\x03\x12\t\n" +
	"\x05TOPIC\x10\x04\x12\f\n" +
	"\bSUBTOPIC\x10\x05\x12\v\n" +
	"\aCONCEPT\x10\x062h\n" +
	"\bTaxonomy\x12\\\n" +
	"\x0fGetTaxonomyById\x12#.taxonomy.v1.GetTaxonomyByIdRequest\x1a$.taxonomy.v1.GetTaxonomyByIdResponseB.Z,taxonomy-client/proto/taxonomy/v1;taxonomypbb\x06proto3"

var (
	file_proto_taxonomy_v1_taxonomy_proto_rawDescOnce sync.Once
	file_proto_taxonomy_v1_taxonomy_proto_rawDescData []byte
)

func file_proto_taxonomy_v1_taxonomy_proto_rawDescGZIP() []byte {
	file_proto_taxonomy_v1_taxonomy_proto_rawDescOnce.Do(func() {
		file_proto_taxonomy_v1_taxonomy_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_taxonomy_v1_taxonomy_proto_rawDesc), len(file_proto_taxonomy_v1_taxonomy_proto_rawDesc)))
	})
	return file_proto_taxonomy_v1_taxonomy_proto_rawDescData
}

var file_proto_taxonomy_v1_taxonomy_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_taxonomy_v1_taxonomy_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_proto_taxonomy_v1_taxonomy_proto_goTypes = []any{
	(NodeType)(0),                   // 0: taxonomy.v1.NodeType
	(*GetTaxonomyByIdRequest)(nil),  // 1: taxonomy.v1.GetTaxonomyByIdRequest
	(*GetTaxonomyByIdResponse)(nil), // 2: taxonomy.v1.GetTaxonomyByIdResponse
	(*RelatedNode)(nil),             // 3: taxonomy.v1.RelatedNode
	(*Node)(nil),                    // 4: taxonomy.v1.Node
	(*TaxonomyInfo)(nil),            // 5: taxonomy.v1.TaxonomyInfo
	nil,                             // 6: taxonomy.v1.TaxonomyInfo.NodesEntry
}
var file_proto_taxonomy_v1_taxonomy_proto_depIdxs = []int32{
	5, // 0: taxonomy.v1.GetTaxonomyByIdResponse.taxonomy_info:type_name -> taxonomy.v1.TaxonomyInfo
	0, // 1: taxonomy.v1.Node.node_type:type_name -> taxonomy.v1.NodeType
	3, // 2: taxonomy.v1.Node.related_nodes:type_name -> taxonomy.v1.RelatedNode
	6, // 3: taxonomy.v1.TaxonomyInfo.nodes:type_name -> taxonomy.v1.TaxonomyInfo.NodesEntry
	4, // 4: taxonomy.v1.TaxonomyInfo.NodesEntry.value:type_name -> taxonomy.v1.Node
	1, // 5: taxonomy.v1.Taxonomy.GetTaxonomyById:input_type -> taxonomy.v1.GetTaxonomyByIdRequest
	2, // 6: taxonomy.v1.Taxonomy.GetTaxonomyById:output_type -> taxonomy.v1.GetTaxonomyByIdResponse
	6, // [6:7] is the sub-list for method output_type
	5, // [5:6] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_proto_taxonomy_v1_taxonomy_proto_init() }
func file_proto_taxonomy_v1_taxonomy_proto_init() {
	if File_proto_taxonomy_v1_taxonomy_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_taxonomy_v1_taxonomy_proto_rawDesc), len(file_proto_taxonomy_v1_taxonomy_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_taxonomy_v1_taxonomy_proto_goTypes,
		DependencyIndexes: file_proto_taxonomy_v1_taxonomy_proto_depIdxs,
		EnumInfos:         file_proto_taxonomy_v1_taxonomy_proto_enumTypes,
		MessageInfos:      file_proto_taxonomy_v1_taxonomy_proto_msgTypes,
	}.Build()
	File_proto_taxonomy_v1_taxonomy_proto = out.File
	file_proto_taxonomy_v1_taxonomy_proto_goTypes = nil
	file_proto_taxonomy_v1_taxonomy_proto_depIdxs = nil
}
